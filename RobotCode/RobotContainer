// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

//import javax.swing.text.StyledEditorKit.ForegroundAction;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj2.command.Command;  
import edu.wpi.first.wpilibj.Joystick;
//import edu.wpi.first.wpilibj.Joystick.AxisType;
import frc.robot.commands.*;
import frc.robot.subsystems.*;
//import edu.wpi.first.wpilibj.Joystick.ButtonType;
//import edu.wpi.first.wpilibj.buttons.JoystickButton;
//import edu.wpi.first.wpilibj.buttons.POVButton;
/**
 * This class is where the bulk of the robot should be declared. Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of the robot (including
 * subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {
  // The robot's subsystems and commands are defined here...

  Joystick driverController_1 = new Joystick(Constants.DRIVER_CONTROLLER_1);
  Joystick driverController_2 = new Joystick(Constants.DRIVER_CONTROLLER_2);
  Joystick Button = new Joystick(Constants.DRIVER_CONTROLLER_BUTTON);

  public static DriveTrain driveTrain = new DriveTrain();

  public double GetDriverXAxis_1(){
    return driverController_1.getX();
  }
  
  public double GetDriverYAxis_1(){
    return driverController_1.getY();
  
  }
  public double GetDriverXAxis_2(){
    return driverController_2.getX();
  }
  
  public double GetDriverYAxis_2(){
    return driverController_2.getY();
  
  }


  public boolean GetDriverRawButton(int button){
    return Button.getRawButton(button);
  }
 

  /** The container for the robot. Contains subsystems, OI devices, and commands. */
  public RobotContainer() {
    // Configure the button bindings
    configureButtonBindings();

    driveTrain.setDefaultCommand(new MecDrive());

  }

  /**
   * Use this method to define your button->command mappings. Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a {@link
   * edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {}

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    return null;
    // An ExampleCommand will run in autonomous

  }
}
