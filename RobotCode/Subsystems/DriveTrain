// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.
package frc.robot.subsystems;

import com.kauailabs.navx.frc.AHRS;
import com.revrobotics.*;

import edu.wpi.first.wpilibj.drive.MecanumDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;


public class DriveTrain extends SubsystemBase {

  CANSparkMax motorLeftFront;
  CANSparkMax motorLeftBack;
  CANSparkMax motorRightFront;
  CANSparkMax motorRightBack;
  public RelativeEncoder motorLeftFrontEncoder;
  public RelativeEncoder motorLeftBackEncoder;
  public RelativeEncoder motorRightFrontEncoder;
  public RelativeEncoder motorRightBackEncoder;
  MecanumDrive mecanumDrive;

    //Nav X instantiation
    public AHRS navX;

  public DriveTrain(){
  //Motor Instantiation
  motorRightBack = new CANSparkMax(Constants.motorRightBack_ID, com.revrobotics.CANSparkMaxLowLevel.MotorType.kBrushless); 
  motorRightFront = new CANSparkMax(Constants.motorRightFront_ID, com.revrobotics.CANSparkMaxLowLevel.MotorType.kBrushless);
  motorLeftFront = new CANSparkMax(Constants.motorLeftFront_ID, com.revrobotics.CANSparkMaxLowLevel.MotorType.kBrushless);
  motorLeftBack = new CANSparkMax(Constants.motorLeftBack_ID, com.revrobotics.CANSparkMaxLowLevel.MotorType.kBrushless);
  //Encoder Instantiation
  motorRightBackEncoder = motorRightBack.getEncoder();
  motorRightFrontEncoder = motorRightFront.getEncoder();
  motorLeftFrontEncoder = motorLeftFront.getEncoder();
  motorLeftBackEncoder = motorLeftBack.getEncoder();
  
  
  //Inverts Motors For Mecanum
  motorLeftFront.setInverted(true);
  motorLeftBack.setInverted(true);

  navX = new AHRS(Constants.navX_ID);

  mecanumDrive = new MecanumDrive(motorLeftFront,motorLeftBack,motorRightFront,motorRightBack);
  }

  public void mecanumDrive(double ySpeed, double xSpeed, double zRotation){
    mecanumDrive.driveCartesian(ySpeed, xSpeed, zRotation);

  }

  public void setLeftMotors(double speed){
    motorLeftFront.set(-speed*0.1);
    motorLeftBack.set(-speed*0.1);
  }

  public void setRightMotors(double speed){
    motorRightFront.set(speed*0.1);
    motorRightBack.set(speed*0.1);
  }
  @Override
  public void periodic() {
    SmartDashboard.putBoolean("navx connected", navX.isConnected());
    // This method will be called once per scheduler run
    
  }
}
